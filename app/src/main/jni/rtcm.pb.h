// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtcm.proto

#ifndef PROTOBUF_INCLUDED_rtcm_2eproto
#define PROTOBUF_INCLUDED_rtcm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rtcm_2eproto 

namespace protobuf_rtcm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_rtcm_2eproto
namespace rtcm {
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace rtcm
namespace google {
namespace protobuf {
template<> ::rtcm::Card* Arena::CreateMaybeMessage<::rtcm::Card>(Arena*);
template<> ::rtcm::User* Arena::CreateMaybeMessage<::rtcm::User>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rtcm {

// ===================================================================

class User : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:rtcm.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(NULL);
  }

  User* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 likeNums = 11;
  int likenums_size() const;
  void clear_likenums();
  static const int kLikeNumsFieldNumber = 11;
  ::google::protobuf::int32 likenums(int index) const;
  void set_likenums(int index, ::google::protobuf::int32 value);
  void add_likenums(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      likenums() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_likenums();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .rtcm.Card card = 1;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 1;
  private:
  const ::rtcm::Card& _internal_card() const;
  public:
  const ::rtcm::Card& card() const;
  ::rtcm::Card* release_card();
  ::rtcm::Card* mutable_card();
  void set_allocated_card(::rtcm::Card* card);

  // int32 age = 3;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // bool hasCar = 4;
  void clear_hascar();
  static const int kHasCarFieldNumber = 4;
  bool hascar() const;
  void set_hascar(bool value);

  // @@protoc_insertion_point(class_scope:rtcm.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > likenums_;
  mutable int _likenums_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::rtcm::Card* card_;
  ::google::protobuf::int32 age_;
  bool hascar_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rtcm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:rtcm.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(Card&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Card* other);
  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(NULL);
  }

  Card* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sign = 3;
  void clear_sign();
  static const int kSignFieldNumber = 3;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // double cash = 2;
  void clear_cash();
  static const int kCashFieldNumber = 2;
  double cash() const;
  void set_cash(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // float foo = 4;
  void clear_foo();
  static const int kFooFieldNumber = 4;
  float foo() const;
  void set_foo(float value);

  // @@protoc_insertion_point(class_scope:rtcm.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  double cash_;
  ::google::protobuf::int32 id_;
  float foo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rtcm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// .rtcm.Card card = 1;
inline bool User::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
inline void User::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) {
    delete card_;
  }
  card_ = NULL;
}
inline const ::rtcm::Card& User::_internal_card() const {
  return *card_;
}
inline const ::rtcm::Card& User::card() const {
  const ::rtcm::Card* p = card_;
  // @@protoc_insertion_point(field_get:rtcm.User.card)
  return p != NULL ? *p : *reinterpret_cast<const ::rtcm::Card*>(
      &::rtcm::_Card_default_instance_);
}
inline ::rtcm::Card* User::release_card() {
  // @@protoc_insertion_point(field_release:rtcm.User.card)
  
  ::rtcm::Card* temp = card_;
  card_ = NULL;
  return temp;
}
inline ::rtcm::Card* User::mutable_card() {
  
  if (card_ == NULL) {
    auto* p = CreateMaybeMessage<::rtcm::Card>(GetArenaNoVirtual());
    card_ = p;
  }
  // @@protoc_insertion_point(field_mutable:rtcm.User.card)
  return card_;
}
inline void User::set_allocated_card(::rtcm::Card* card) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete card_;
  }
  if (card) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      card = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:rtcm.User.card)
}

// string name = 2;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:rtcm.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rtcm.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rtcm.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rtcm.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rtcm.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rtcm.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:rtcm.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rtcm.User.name)
}

// int32 age = 3;
inline void User::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 User::age() const {
  // @@protoc_insertion_point(field_get:rtcm.User.age)
  return age_;
}
inline void User::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:rtcm.User.age)
}

// bool hasCar = 4;
inline void User::clear_hascar() {
  hascar_ = false;
}
inline bool User::hascar() const {
  // @@protoc_insertion_point(field_get:rtcm.User.hasCar)
  return hascar_;
}
inline void User::set_hascar(bool value) {
  
  hascar_ = value;
  // @@protoc_insertion_point(field_set:rtcm.User.hasCar)
}

// repeated int32 likeNums = 11;
inline int User::likenums_size() const {
  return likenums_.size();
}
inline void User::clear_likenums() {
  likenums_.Clear();
}
inline ::google::protobuf::int32 User::likenums(int index) const {
  // @@protoc_insertion_point(field_get:rtcm.User.likeNums)
  return likenums_.Get(index);
}
inline void User::set_likenums(int index, ::google::protobuf::int32 value) {
  likenums_.Set(index, value);
  // @@protoc_insertion_point(field_set:rtcm.User.likeNums)
}
inline void User::add_likenums(::google::protobuf::int32 value) {
  likenums_.Add(value);
  // @@protoc_insertion_point(field_add:rtcm.User.likeNums)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
User::likenums() const {
  // @@protoc_insertion_point(field_list:rtcm.User.likeNums)
  return likenums_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
User::mutable_likenums() {
  // @@protoc_insertion_point(field_mutable_list:rtcm.User.likeNums)
  return &likenums_;
}

// -------------------------------------------------------------------

// Card

// int32 id = 1;
inline void Card::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Card::id() const {
  // @@protoc_insertion_point(field_get:rtcm.Card.id)
  return id_;
}
inline void Card::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:rtcm.Card.id)
}

// double cash = 2;
inline void Card::clear_cash() {
  cash_ = 0;
}
inline double Card::cash() const {
  // @@protoc_insertion_point(field_get:rtcm.Card.cash)
  return cash_;
}
inline void Card::set_cash(double value) {
  
  cash_ = value;
  // @@protoc_insertion_point(field_set:rtcm.Card.cash)
}

// string sign = 3;
inline void Card::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Card::sign() const {
  // @@protoc_insertion_point(field_get:rtcm.Card.sign)
  return sign_.GetNoArena();
}
inline void Card::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rtcm.Card.sign)
}
#if LANG_CXX11
inline void Card::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rtcm.Card.sign)
}
#endif
inline void Card::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rtcm.Card.sign)
}
inline void Card::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rtcm.Card.sign)
}
inline ::std::string* Card::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:rtcm.Card.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Card::release_sign() {
  // @@protoc_insertion_point(field_release:rtcm.Card.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Card::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:rtcm.Card.sign)
}

// float foo = 4;
inline void Card::clear_foo() {
  foo_ = 0;
}
inline float Card::foo() const {
  // @@protoc_insertion_point(field_get:rtcm.Card.foo)
  return foo_;
}
inline void Card::set_foo(float value) {
  
  foo_ = value;
  // @@protoc_insertion_point(field_set:rtcm.Card.foo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtcm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rtcm_2eproto
